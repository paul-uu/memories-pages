{"version":3,"sources":["constants/constants.tsx","components/Header.tsx","components/Memory.tsx","contexts.ts","components/ViewMemoryModal.tsx","components/Body.tsx","components/Sliders.tsx","components/MemoryModal.tsx","utilities/index.tsx","components/DataVisualizations/EmotionsOverTime.tsx","components/VisualizationContainer.tsx","reducers.ts","App.tsx","serviceWorker.tsx","index.tsx"],"names":["emotions","emotions3","joy","label","color","anger","sadness","fear","disgust","neutral","sortOptions","new","value","old","sad","filterOptions","all","core","actions","StyledHeader","styled","header","Title","h3","Count","div","Actions","ActionLink","Dropdown","DropdownLabel","Search","SearchInput","Header","props","useState","isSearchVisible","setIsSearchVisible","useEffect","setSearch","count","onClick","toggleAddModal","className","aria-hidden","toggleDataViz","onChange","e","sortMemories","target","Object","values","map","option","key","filterMemories","style","clear","type","searchString","getGradient","str","percentageTotal","emotion","percentage","hex","formatDate","ms","moment","format","StyledMemory","gradient","Memory","viewMemory","memory","dateTime","data-tip","data-for","id","place","effect","title","MemoriesContext","createContext","ReactModal","setAppElement","RadialChartContainer","MemoryTitle","MemoryDateTime","MemoryDescription","Button","button","emotionObjToRadialChartObj","output","push","angle","innerRadius","radialChartLabelsStyle","fontSize","fill","backgroundColor","ViewMemoryModal","memContext","useContext","description","formattedDateTime","isOpen","shouldCloseOnOverlayClick","shouldCloseOnEsc","role","contentLabel","data","width","height","colorType","showLabels","labelsStyle","toggle","dispatch","StyledBody","Body","parsedMemories","memories","sortBy","filterBy","memoriesCopy","filter","m","includes","isCoreMemory","sort","A","B","filterSortMemories","selectedMemory","setSelectedMemory","i","StyledSliderContainer","StyledSlider","createSliderWithTooltip","Slider","Sliders","onSliderChange","keys","defaultValue","val","min","max","step","vertical","handleStyle","border","trackStyle","Label","TitleInput","input","Textarea","textarea","CoreMemory","Buttons","MemoryModal","initEmptyMemory","setMemory","errors","setErrors","Math","random","toString","substr","Date","getTime","media","audio","image","video","setEmotionPercentages","emotionsCopy","assign","valuesTotal","emotionsObj","valueTotal","obj","length","console","log","getValuesTotal","handleInputChange","currentMemory","checked","name","resetForm","getMemoryErrors","errorMessages","trim","hasEmotions","content","boxShadow","rows","error","memoryToSave","newErrors","disabled","EmotionsOverTimeContainer","EmotionsOverTime","formattedMemories","date","text","ResponsiveContainer","BarChart","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","Bar","stackId","types","overTime","DataVisualization","Wrapper","Close","DataVisualizationContainer","VisualizationContainer","setIsOpen","selectedType","setSelectedType","getMemoryIndex","arr","memoriesReducer","state","action","index","copy","StyledApp","App","useReducer","localStorage","getItem","JSON","parse","loadMemories","setItem","stringify","isMemoryModalOpen","setIsMemoryModalOpen","setSortBy","setFilterBy","setSearchString","isDataVizOpen","setIsDataVizOpen","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b34f4271.chunk.js","sourcesContent":["export const LOCALSTORAGEKEY = 'memoryCollectorData';\n\n/* Need to consolodate these! */\n\nexport const emotions = {\n  joy: 'joy',\n  anger: 'anger',\n  sadness: 'sadness',\n  fear: 'fear',\n  disgust: 'disgust',\n  neutral: 'neutral',\n};\n\nexport const emotions2 = [\n  'joy',\n  'anger',\n  'sadness',\n  'fear',\n  'disgust',\n  'neutral',\n];\n\nexport const emotions3: {\n  [index: string]: { label: string; color: string };\n} = {\n  joy: {\n    label: 'joy',\n    color: '#ffca3a'\n  },\n  anger: {\n    label: 'anger',\n    color: '#ff595e',\n  },\n  sadness: {\n    label: 'sadness',\n    color: '#1982c4',\n  },\n  fear: {\n    label: 'fear',\n    color: '#6a4c93',\n  },\n  disgust: {\n    label: 'disgust',\n    color: '#8ac926',\n  },\n  neutral: {\n    label: 'neutral',\n    color: '#ddd',\n  },\n};\n\nexport const sortOptions = {\n  new: {\n    label: 'Newest',\n    value: 'new',\n  },\n  old: {\n    label: 'Oldest',\n    value: 'old',\n  },\n  joy: {\n    label: 'Joyful',\n    value: emotions.joy,\n  },\n  anger: {\n    label: 'Anger',\n    value: emotions.anger,\n  },\n  sad: {\n    label: 'Sadness',\n    value: emotions.sadness,\n  },\n  fear: {\n    label: 'Fearful',\n    value: emotions.fear,\n  },\n  disgust: {\n    label: 'Disgusting',\n    value: emotions.disgust,\n  },\n  neutral: {\n    label: 'Neutral',\n    value: emotions.neutral,\n  },\n};\n\nexport const filterOptions = {\n  all: {\n    label: 'All',\n    value: 'all',\n  },\n  joy: {\n    label: 'Joy',\n    value: emotions.joy,\n  },\n  anger: {\n    label: 'Anger',\n    value: emotions.anger,\n  },\n  sad: {\n    label: 'Sad',\n    value: emotions.sadness,\n  },\n  fear: {\n    label: 'Fearful',\n    value: emotions.fear,\n  },\n  disgust: {\n    label: 'Disgusting',\n    value: emotions.disgust,\n  },\n  neutral: {\n    label: 'Neutral',\n    value: emotions.neutral,\n  },\n  core: {\n    label: 'Core Memories',\n    value: 'core',\n  },\n};\n\nexport const MONTHS = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\nexport const DAYS = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n];\n\nexport const actions = {\n  SET: 'SET',\n  DELETE: 'DELETE',\n};\n","import React, { useState, useEffect } from 'react';\nimport { sortOptions, filterOptions } from '../constants/constants';\nimport styled from 'styled-components';\n\ninterface Props {\n  filterMemories: (filter: string) => void;\n  sortMemories: (sort: string) => void;\n  toggleAddModal: (isOpen: any) => void; // look into this arg type\n  toggleDataViz: () => void;\n  searchString: string;\n  setSearch: Function;\n  count: number;\n}\n\nfunction Header(props: Props): React.ReactElement {\n  const [isSearchVisible, setIsSearchVisible] = useState(false);\n  useEffect(() => {\n    if (!isSearchVisible) props.setSearch('');\n  }, [isSearchVisible]);\n  const toggleSearchVisibility = () => {\n    setIsSearchVisible((isSearchVisible) => !isSearchVisible);\n  };\n\n  return (\n    <>\n      <StyledHeader>\n        <Title>Memory Collector</Title>\n\n        <Count>{props.count || 0} Memories</Count>\n\n        <Actions>\n          <ActionLink onClick={props.toggleAddModal}>\n            <i className=\"fa fa-plus\" aria-hidden=\"true\"></i>\n            <span>Add Memory</span>\n          </ActionLink>\n\n          <ActionLink onClick={props.toggleDataViz}>\n            \n            <i className=\"fa fa-bar-chart\" aria-hidden=\"true\"></i>\n            <span>Data Visualizations</span>\n          </ActionLink>\n\n          <Search onClick={toggleSearchVisibility}>\n            <i\n              className={`fa ${isSearchVisible ? 'fa-times' : 'fa-search'}`}\n              aria-hidden=\"true\"\n            ></i>\n          </Search>\n\n          <Dropdown>\n            <DropdownLabel>Sort By</DropdownLabel>\n            <select onChange={(e) => props.sortMemories(e.target.value)}>\n              {Object.values(sortOptions).map((option) => (\n                <option key={option.label} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </Dropdown>\n\n          <Dropdown>\n            <DropdownLabel>Filter By</DropdownLabel>\n            <select onChange={(e) => props.filterMemories(e.target.value)}>\n              {Object.values(filterOptions).map((option) => (\n                <option key={option.label} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </Dropdown>\n          <div style={{ clear: 'both' }}></div>\n        </Actions>\n      </StyledHeader>\n      <SearchInput className={isSearchVisible ? 'visible' : ''}>\n        <input\n          type=\"text\"\n          value={props.searchString}\n          onChange={(e) => {\n            props.setSearch(e.target.value);\n          }}\n        />\n        <button onClick={() => props.setSearch('')}>Clear</button>\n      </SearchInput>\n    </>\n  );\n}\n\nconst StyledHeader = styled.header`\n  position: fixed;\n  top: 0;\n  padding: 8px 16px;\n  height: initial;\n  width: 100%;\n  background-color: white;\n  z-index: 6;\n  -webkit-box-shadow: 0px 1px 4px 0px rgba(170, 170, 170, 1x);\n  -moz-box-shadow: 0px 1px 4px 0px rgba(170, 170, 170, 1);\n  box-shadow: 0px 1px 4px 0px rgba(170, 170, 170, 1);\n`;\nconst Title = styled.h3`\n  float: left;\n  font-weight: 400;\n  font-size: 16px;\n  color: #999;\n  margin: 0;\n`;\nconst Count = styled.div`\n  float: right;\n  font-weight: 400;\n  font-size: 16px;\n  color: #999;\n`;\nconst Actions = styled.div`\n  clear: both;\n  padding-top: 24px;\n  position: relative;\n`;\nconst ActionLink = styled.div`\n  .fa {\n    margin-right: 8px;\n  }\n  float: left;\n  margin-top: 14px;\n  cursor: pointer;\n  color: #555;\n  @media (max-width: 599px) {\n    span {\n      display: none;\n    }\n  }\n  &:not(:last-child) {\n    margin-right: 16px;\n  }\n  &:hover {\n    text-decoration: underline;\n    color: #000;\n  }\n`;\nconst Dropdown = styled.div`\n  float: right;\n  margin-right: 16px;\n`;\nconst DropdownLabel = styled.div`\n  font-size: 10px;\n  color: #bbb;\n  font-weight: 400;\n`;\nconst Search = styled.div`\n  float: right;\n  margin-top: 12px;\n  cursor: pointer;\n`;\nconst SearchInput = styled.div`\n  position: absolute;\n  top: 69px;\n  right: 46px;\n  z-index: 1;\n  transition: top 0.2s;\n  &.visible {\n    top: 96px;\n  }\n`;\n\nexport default Header;\n","import React from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport styled from 'styled-components';\nimport moment from 'moment';\nimport { IMemory } from '../constants/interfaces';\nimport { emotions3 } from '../constants/constants';\n\ninterface Props {\n  memory: IMemory;\n  viewMemory: Function;\n}\n\ninterface StyledMemoryProps {\n  gradient: string;\n}\n\nfunction Memory(props: Props): React.ReactElement {\n  const { viewMemory, memory } = props;\n  const gradient = getGradient(memory.emotions);\n  const dateTime = formatDate(memory.dateTime);\n  return (\n    <>\n      <StyledMemory\n        gradient={gradient}\n        onClick={() => viewMemory(memory)}\n        data-tip=\"React-tooltip\"\n        data-for={memory.id}\n      />\n      <ReactTooltip place=\"top\" id={memory.id} type=\"dark\" effect=\"solid\">\n        <span>{memory.title && `${memory.title} - `}{dateTime}</span>\n      </ReactTooltip>\n    </>\n  );\n}\n\nconst getGradient = (emotions: {}): string => {\n  let str = 'linear-gradient(to bottom, ';\n  let percentageTotal = 0;\n  for (const emotion in emotions) {\n    //@ts-ignore\n    const percentage = emotions[emotion].percentage;\n    if (percentage) {\n      const hex = emotions3[emotion].color;\n      if (percentage > 99) {\n        return hex;\n      } else {\n        percentageTotal += percentage;\n        str +=\n          percentageTotal < 100 ? `${hex} ${percentageTotal}%, ` : `${hex}`;\n      }\n    }\n  }\n  return str + ');';\n};\n\nconst formatDate = (ms: number) => {\n  return moment(ms).format(\"M/D/YY, h:mm:ss a\");\n};\n\nconst StyledMemory = styled.div`\n  width: 35px;\n  height: 35px;\n  border: 1px solid #ccc;\n  border-radius: 50%;\n  cursor: pointer;\n  background: ${(props: StyledMemoryProps) => props.gradient};\n`;\n\nexport default Memory;\n","import { createContext } from 'react';\n\nexport const MemoriesContext = createContext({});\n","import React, { useContext } from 'react';\nimport ReactModal from 'react-modal';\nimport styled from 'styled-components';\nimport { IMemory } from '../constants/interfaces';\nimport { actions } from '../constants/constants';\nimport { MemoriesContext } from '../contexts';\nimport { RadialChart } from 'react-vis';\nimport '../../node_modules/react-vis/dist/style.css';\nimport { emotions3 } from '../constants/constants';\nimport moment from 'moment';\n\nReactModal.setAppElement('#root');\n\ninterface Props {\n  memory: IMemory | null;\n  isOpen: boolean;\n  toggle: Function;\n}\n\nconst RadialChartContainer = styled.div`\n  margin-bottom: 8px;\n  text-align: center;\n  > div {\n    display: inline-block;\n  }\n`;\n\nconst MemoryTitle = styled.div`\n  margin-bottom: 8px;\n`;\n\nconst MemoryDateTime = styled.div`\n  margin-bottom: 8px;\n`;\n\nconst MemoryDescription = styled.div`\n  margin-bottom: 16px\n`;\n\nconst Button = styled.button`\n  margin-right: 8px;\n  cursor: pointer;\n`;\n\nconst emotionObjToRadialChartObj = (emotions: any) => {\n  const output = [];\n  for (let emotion in emotions) {\n    if (emotions[emotion]['percentage'] > 0) {\n      output.push({\n        angle: emotions[emotion]['percentage'],\n        label: emotion,\n        color: emotions3[emotion]['color'],\n        innerRadius: 0.9\n      });\n    }\n  }\n  return output;\n};\n\nconst radialChartLabelsStyle = {\n  fontSize: 18,\n  fill: \"#333\",\n  backgroundColor: \"red\"\n}\n\nconst ViewMemoryModal = (props: Props) => {\n  const memContext: any = useContext(MemoriesContext);\n  if (props.memory) {\n    const { title, description, emotions, dateTime } = props.memory;\n\n    const formattedDateTime = moment(dateTime).format(\"dddd, MMMM Do YYYY, h:mm:ss A\")\n\n    return (\n      <ReactModal\n        isOpen={props.isOpen}\n        shouldCloseOnOverlayClick={true}\n        shouldCloseOnEsc={true}\n        role=\"dialog\"\n        contentLabel=\"View Memory\"\n      >\n        <MemoryTitle>{title}</MemoryTitle>\n        <MemoryDateTime>{formattedDateTime}</MemoryDateTime>\n        <RadialChartContainer>\n          <RadialChart\n            data={emotionObjToRadialChartObj(emotions)}\n            width={300}\n            height={300}\n            colorType=\"literal\"\n            showLabels={true}\n            labelsStyle={radialChartLabelsStyle}\n\n          />\n        </RadialChartContainer>\n        <MemoryDescription>{description}</MemoryDescription>\n        <Button onClick={() => props.toggle()}>Close</Button>\n        <Button\n          onClick={() => {\n            memContext.dispatch({\n              type: actions.DELETE,\n              data: { memory: props.memory },\n            });\n            props.toggle();\n          }}\n        >\n          Delete Memory\n        </Button>\n      </ReactModal>\n    );\n  }\n  return null;\n};\n\nexport default ViewMemoryModal;\n","import React, { useState } from 'react';\nimport Memory from './Memory';\nimport styled from 'styled-components';\nimport { sortOptions, filterOptions } from '../constants/constants';\nimport { IMemory } from '../constants/interfaces';\nimport ViewMemoryModal from './ViewMemoryModal';\nimport MemoryContainer from './MemoryContainer';\n\ninterface Props {\n  memories: any;\n  sortBy: string;\n  filterBy: string;\n  searchString: string;\n}\n\nfunction Body(props: Props): React.ReactElement {\n  const filterSortMemories = (\n    memories: IMemory[],\n    sortBy: string,\n    filterBy: string,\n    searchString: string\n  ) => {\n    let memoriesCopy = [...memories];\n\n    if (searchString) {\n      memoriesCopy = memoriesCopy.filter((m) => m.title.includes(searchString) || m.description.includes(searchString));\n    }\n\n    if (filterBy) {\n      memoriesCopy = memoriesCopy.filter((m) => {\n        if (filterBy === filterOptions.all.value) return true;\n        else if (filterBy === filterOptions.core.value) return m.isCoreMemory;\n        else return m.emotions[filterBy].value > 0;\n      });\n    }\n\n    if (sortBy) {\n      if (sortBy === sortOptions.new.value)\n        memoriesCopy.sort((A, B) => B.dateTime - A.dateTime);\n      else if (sortBy === sortOptions.old.value)\n        memoriesCopy.sort((A, B) => A.dateTime - B.dateTime);\n      else\n        memoriesCopy.sort(\n          (A, B) => B.emotions[sortBy].value - A.emotions[sortBy].value\n        );\n    }\n    return memoriesCopy;\n  };\n\n  const { memories, sortBy, filterBy, searchString } = props;\n  const parsedMemories = filterSortMemories(\n    memories,\n    sortBy,\n    filterBy,\n    searchString\n  );\n  const [selectedMemory, setSelectedMemory] = useState(null);\n\n  return (\n    <StyledBody>\n      {parsedMemories.map((memory: any, i: number) => (\n        <Memory viewMemory={setSelectedMemory} memory={memory} key={i} />\n      ))}\n\n      {/* <MemoryContainer memories={memories} /> */}\n\n      <ViewMemoryModal\n        memory={selectedMemory}\n        isOpen={selectedMemory !== null}\n        toggle={() => setSelectedMemory(null)}\n      />\n    </StyledBody>\n  );\n}\n\nconst StyledBody = styled.div`\n  display: flex;\n  flex-wrap: wrap-reverse;\n  align-content: flex-start;\n  position: relative;\n  width: 100%;\n  min-height: 100%;\n  padding: 150px 2px 1px 2px;\n`;\n\nexport default Body;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Slider, { createSliderWithTooltip } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\nimport { emotions3 } from '../constants/constants';\nimport { IMemory } from '../constants/interfaces';\n\ninterface Props {\n  onSliderChange: Function;\n  memory: IMemory;\n}\n\nconst StyledSliderContainer = styled.div`\n  height: 25%;\n  margin: 45px 0;\n  display: flex;\n  justify-content: space-around;\n`;\n\nconst StyledSlider = styled(createSliderWithTooltip(Slider))`\n  position: relative;\n  > span {\n    position: absolute;\n    top: -30px;\n    left: 0;\n  }\n`;\n\nfunction Sliders(props: Props): React.ReactElement {\n  const { memory, onSliderChange } = props;\n\n  return (\n    <StyledSliderContainer>\n      {emotions3 &&\n        Object.keys(emotions3).map((emotion) => {\n          const { label } = emotions3[emotion];\n          return (\n            <StyledSlider\n              key={label}\n              defaultValue={memory.emotions[label].value}\n              value={memory.emotions[label].value}\n              onChange={(val: any) => onSliderChange(val, emotion)}\n              min={0}\n              max={10}\n              step={1}\n              vertical={true}\n              handleStyle={{\n                backgroundColor: emotions3[emotion].color,\n                border: `2px solid ${emotions3[emotion].color}`,\n              }}\n              trackStyle={{\n                backgroundColor: emotions3[emotion].color,\n              }}\n            >\n              <span>{emotion}</span>\n            </StyledSlider>\n          );\n        })}\n    </StyledSliderContainer>\n  );\n}\n\nexport default Sliders;\n","import React, { useState, useContext } from 'react';\nimport ReactModal from 'react-modal';\nimport styled from 'styled-components';\nimport { IMemory } from '../constants/interfaces';\nimport { emotions3 } from '../constants/constants';\nimport { generateId, isObjEmpty } from '../utilities';\nimport Sliders from './Sliders';\nimport { MemoriesContext } from '../contexts';\n\ninterface Props {\n  toggleAddModal: (isOpen: any) => void;\n  isOpen: boolean;\n}\n\nconst Header = styled.header`\n  display: flex;\n  justify-content: space-between;\n  h3 {\n    margin-top: 0;\n  }\n  .fa {\n    cursor: pointer;\n    color: #555;\n    &:hover {\n      color: #333;\n    }\n  }\n`;\nconst Label = styled.label`\n  display: block;\n  margin-left: 10%;\n  font-size: 13px;\n  color: #555;\n`;\nconst TitleInput = styled.input`\n  width: 80%;\n  margin-left: 10%;\n  margin-bottom: 16px;\n  display: block;\n`;\nconst Textarea = styled.textarea`\n  width: 80%;\n  margin-left: 10%;\n  margin-bottom: 16px;\n`;\nconst CoreMemory = styled.div`\n  margin-left: 10%;\n  font-size: 13px;\n  margin-bottom: 64px;\n`;\nconst Buttons = styled.div`\n  text-align: right;\n  button {\n    margin-right: 8px;\n    cursor: pointer;\n  }\n`;\n\nReactModal.setAppElement('#root');\n\nfunction MemoryModal(props: Props): React.ReactElement {\n  const [memory, setMemory] = useState<any>(initEmptyMemory());\n  const [errors, setErrors] = useState<string[]>([]); // eventually, define Error type { message: string, type: string? }\n  const memContext: any = useContext(MemoriesContext);\n\n  function initEmptyMemory(): IMemory {\n    const emptyMemory: IMemory = {\n      id: generateId(),\n      dateTime: new Date().getTime(),\n      title: '',\n      description: '',\n      media: { audio: '', image: '', video: '' },\n      isCoreMemory: false,\n      emotions: {\n        joy: { percentage: 0, value: 0 },\n        anger: { percentage: 0, value: 0 },\n        sadness: { percentage: 0, value: 0 },\n        fear: { percentage: 0, value: 0 },\n        disgust: { percentage: 0, value: 0 },\n        neutral: { percentage: 0, value: 0 },\n      }\n    };\n    return emptyMemory;\n  }\n\n  const handleSliderChange = (val: any, emotion: any) => {\n    const currentMemory = Object.assign({}, memory);\n    currentMemory.emotions[emotion].value = val;\n    setMemory(currentMemory);\n  };\n\n  const setEmotionPercentages = (emotions: {}) => {\n    const emotionsCopy = Object.assign({}, emotions);\n    const valuesTotal = getValuesTotal(emotionsCopy);\n    for (const emotion in emotionsCopy) {\n      // @ts-ignore\n      const value = emotionsCopy[emotion].value;\n      // @ts-ignore\n      emotionsCopy[emotion].percentage = (value / valuesTotal) * 100;\n    }\n    return emotionsCopy;\n\n    function getValuesTotal(emotionsObj: {}): number {\n      let valueTotal = 0;\n      if (!isObjEmpty(emotionsObj)) {\n        console.log(emotionsObj);\n        for (const emotion in emotionsObj) {\n          // @ts-ignore\n          valueTotal += emotionsObj[emotion].value;\n        }\n      }\n      return valueTotal;\n    }\n  };\n\n  const handleInputChange = (e: any) => {\n    const currentMemory = Object.assign({}, memory);\n    const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n    currentMemory[e.target.name] = value;\n    setMemory(currentMemory);\n  };\n\n  const resetForm = () => {\n    setMemory(initEmptyMemory());\n  };\n\n  const handleCancel = () => {\n    resetForm();\n    props.toggleAddModal(false);\n  };\n\n  const handleSave = () => {\n    const memoryToSave = Object.assign({}, memory);\n    const newErrors = getMemoryErrors(memoryToSave);\n    if (newErrors.length > 0) {\n      return setErrors(newErrors);\n    } \n    else {\n      memoryToSave.dateTime = new Date().getTime();\n      memoryToSave.emotions = setEmotionPercentages(memoryToSave.emotions);\n      memContext.dispatch({\n        type: 'SET',\n        data: { memory: memoryToSave },\n      });\n      resetForm();\n      props.toggleAddModal(false);\n    }\n  };\n\n  const isSaveDisabled = () => {\n    return getMemoryErrors(Object.assign({}, memory)).length > 0;\n  };\n\n  const getMemoryErrors = (memory: IMemory): string[] => {\n    const errorMessages = [];\n    if (memory.title.trim().length <= 0) {\n      errorMessages.push('Please add a title for your memory');\n    }\n    if (memory.description.trim().length <= 0) {\n      errorMessages.push('Please add a description of your memeory');\n    }\n    if (!hasEmotions(memory.emotions)) {\n      errorMessages.push('But how did you feel??');\n    }\n    return errorMessages;\n  };\n  const hasEmotions = (emotions: {}): boolean => {\n    for (const emotion in emotions) {\n      // @ts-ignore\n      if (emotions[emotion].value > 0) return true;\n    }\n    return false;\n  };\n\n  return (\n    <ReactModal\n      isOpen={props.isOpen}\n      shouldCloseOnOverlayClick={true}\n      shouldCloseOnEsc={true}\n      role=\"dialog\"\n      contentLabel=\"Add new memory modal\"\n      style={{\n        content: {\n          boxShadow: 'rgba(99, 99, 99, 0.2) 0px 2px 8px 0px'\n        }\n      }}\n    >\n      <Header>\n        <h3>Add New Memory</h3>\n        <i className=\"fa fa-times\" onClick={props.toggleAddModal}></i>\n      </Header>\n\n      <Label>Title</Label>\n      <TitleInput \n        name='title'\n        value={memory.title}\n        onChange={handleInputChange}\n      />\n\n      <Label>Description</Label>\n      <Textarea\n        name=\"description\"\n        rows={5}\n        value={memory.description}\n        onChange={handleInputChange}\n      />\n\n      <CoreMemory>\n        <label>Core Memory</label>\n        <input\n          name=\"isCoreMemory\"\n          type=\"checkbox\"\n          checked={memory.isCoreMemory}\n          onChange={handleInputChange}\n        />\n      </CoreMemory>\n\n      <Sliders onSliderChange={handleSliderChange} memory={memory} />\n\n      <div>\n        <i className=\"fa fa-music\" aria-hidden=\"true\"></i>\n        <i className=\"fa fa-picture-o\" aria-hidden=\"true\"></i>\n        <i className=\"fa fa-video-camera\" aria-hidden=\"true\"></i>\n      </div>\n\n      <br />\n      {errors.length > 0 &&\n        errors.map((error, i) => <div key={i}>{error}</div>)}\n      <br />\n\n      <Buttons>\n        <button onClick={handleCancel}>Cancel</button>\n        <button onClick={resetForm}>Reset</button>\n        <button onClick={handleSave} disabled={isSaveDisabled()}>\n          Save Memory\n        </button>\n      </Buttons>\n    </ReactModal>\n  );\n}\n\nexport default MemoryModal;\n","export const generateId = () => '_' + Math.random().toString(36).substr(2, 9);\n\nexport const isObjEmpty = (obj: object): boolean =>\n  Object.keys(obj).length === 0;\n","import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { format } from 'date-fns';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer\n} from 'recharts';\nimport { emotions3 } from '../../constants/constants';\nimport { IMemory } from '../../constants/interfaces';\n\ninterface Props {\n  memories: IMemory[];\n}\n\nconst EmotionsOverTime = (props: Props) => {\n\n  const { memories } = props;\n\n  if (memories) {\n    let formattedMemories = memories.map((m:any) => {\n      //const date = format(new Date(m.dateTime), 'MM/dd/yy - h:mm aaaa');\n      const date = format(new Date(m.dateTime), 'MM/dd/yy');\n      return {\n        date,\n        joy: m.emotions.joy.percentage,\n        anger: m.emotions.anger.percentage,\n        sadness: m.emotions.sadness.percentage,\n        fear: m.emotions.fear.percentage,\n        disgust: m.emotions.disgust.percentage,\n        neutral: m.emotions.neutral.percentage,\n        id: m.id,\n        text: m.text\n      }\n    });\n\n    return (\n      <EmotionsOverTimeContainer>\n        <ResponsiveContainer>\n          <BarChart \n            data={formattedMemories} \n            // width={1100} \n            // height={500}\n            margin={{\n              top: 25,\n              right: 0,\n              left: 0,\n              bottom: 25,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip />\n            <Legend />\n            <Bar dataKey=\"joy\" stackId=\"a\" fill={emotions3.joy.color} />\n            <Bar dataKey=\"anger\" stackId=\"a\" fill={emotions3.anger.color} />\n            <Bar dataKey=\"sadness\" stackId=\"a\" fill={emotions3.sadness.color} />\n            <Bar dataKey=\"fear\" stackId=\"a\" fill={emotions3.fear.color} />\n            <Bar dataKey=\"disgust\" stackId=\"a\" fill={emotions3.disgust.color} />\n            <Bar dataKey=\"neutral\" stackId=\"a\" fill={emotions3.neutral.color} />\n          </BarChart>\n        </ResponsiveContainer>\n      </EmotionsOverTimeContainer>\n    );\n  }\n  return null;\n}\n\nconst EmotionsOverTimeContainer = styled.div`\n  width: 100%;\n  height: 90%;\n\n  .recharts-legend-wrapper {\n    bottom: 10px !important;\n  }\n`;\n\nexport default EmotionsOverTime;","import React, {useState, useEffect} from 'react';\nimport styled from 'styled-components';\nimport EmotionsOverTime from './DataVisualizations/EmotionsOverTime';\n\ninterface Props {\n  memories: any;\n  isOpen: boolean;\n  setIsOpen: Function;\n}\n\nconst types: any = {\n  overTime: { \n    label: 'emotions over time',\n    value: 'overTime'\n  }\n}\n\nfunction VisualizationContainer(props: Props): React.ReactElement | null {\n\n  const { memories, isOpen, setIsOpen } = props;\n  const [selectedType, setSelectedType] = useState(types.overTime.value);\n  \n  //if (isOpen) {\n    return (\n      <Wrapper className={isOpen ? 'open' : 'closed'}>\n\n        <Dropdown>\n          <DropdownLabel>Visualization Type</DropdownLabel>\n          <select value={selectedType} onChange={e => setSelectedType(e.target.value)}>\n          { Object.keys(types).map(type => \n              <option key={type} value={type}>{types[type].label}</option>\n            )\n          }\n          </select>\n        </Dropdown>\n\n        <Close onClick={e => setIsOpen(false)}>Close</Close>\n\n        <DataVisualizationContainer>\n          <label>{ types[selectedType].label }</label>\n          <DataVisualization \n            className='data-visualization' \n            type={selectedType} \n            memories={memories} \n          />\n        </DataVisualizationContainer>\n\n      </Wrapper>\n    )\n  //}\n  //else return null;\n}\n\ninterface DataVisualizationProps {\n  className: string;\n  type: string;\n  memories: any;\n}\n\nconst DataVisualization = (props: DataVisualizationProps) => {\n  const { type, memories } = props;\n  switch (type) {\n    case types.overTime.value:\n      return <EmotionsOverTime memories={memories} />;\n    default:\n      return <EmotionsOverTime memories={memories} />;\n  }\n}\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  padding: 25px;\n  color: #555;\n  z-index: 7;\n  background-color: rgba(255,255,255,1);\n  left: 0;\n  transition: all .5s ease-out;\n  \n  &.closed {\n    background-color: rgba(255,255,255,0);\n    pointer-events: none;\n    color: #fff;\n    left: -100%;\n  }\n\n`;\n\nconst Dropdown = styled.div`\n  margin-bottom: 25px;\n  \n`;\nconst DropdownLabel = styled.div`\n  font-size: 10px;\n  color: #bbb;\n  font-weight: 400;\n`;\n\nconst Close = styled.div`\n  position: absolute;\n  right: 25px;\n  top: 25px;\n  cursor: pointer;\n  &:hover {\n    text-decoration: underline;\n    color: #000;\n  }\n`;\n\n\nconst DataVisualizationContainer = styled.div`\n\n  width: 100%;\n  height: 90%;\n\n  .data-visualization-label {\n    font-size: 10px;\n    color: #bbb;\n    font-weight: 400;\n  }\n\n  .data-visualization {\n    padding-top: 25px;\n  }\n`;\n\nexport default VisualizationContainer;","import { createContext } from 'react';\nimport { actions } from './constants/constants';\nimport { IMemory, IAction } from './constants/interfaces';\n\nconst memoriesReducer = (state: IMemory[], action: IAction): IMemory[] => {\n  const index = getMemoryIndex(state, action.data.memory);\n  const { memory } = action.data;\n\n  switch (action.type) {\n    case actions.SET:\n      let copy = [...state];\n      if (index > -1) {\n        copy = copy.map((m) => (m.id === memory.id ? memory : m));\n      } else {\n        copy.push(memory);\n      }\n      return copy;\n\n    case actions.DELETE:\n      return state.filter((m) => m.id !== memory.id);\n\n    default:\n      return state;\n  }\n};\n\nconst getMemoryIndex = (arr: IMemory[], memory: IMemory) => {\n  for (let i = 0; i < arr.length; i++) {\n    if (memory.id === arr[i].id) return i;\n  }\n  return -1;\n};\n\nexport default memoriesReducer;\n","import React, { useState, useEffect, useReducer } from 'react';\nimport Header from './components/Header';\nimport Body from './components/Body';\nimport MemoryModal from './components/MemoryModal';\nimport VisualizationContainer from './components/VisualizationContainer';\nimport styled from 'styled-components';\nimport {\n  LOCALSTORAGEKEY,\n  sortOptions,\n  filterOptions,\n} from './constants/constants';\nimport memoriesReducer from './reducers';\nimport { MemoriesContext } from './contexts';\n\nconst App: React.FC = () => {\n  const loadMemories = () => {\n    const memories = localStorage.getItem(LOCALSTORAGEKEY);\n    if (memories) return JSON.parse(memories);\n    else return [];\n  };\n\n  const [memories, dispatch] = useReducer(memoriesReducer, loadMemories());\n  useEffect(() => {\n    localStorage.setItem(LOCALSTORAGEKEY, JSON.stringify(memories));\n  }, [memories]);\n\n  const [isMemoryModalOpen, setIsMemoryModalOpen] = useState(false);\n  const [sortBy, setSortBy] = useState<string>(sortOptions.new.value);\n  const [filterBy, setFilterBy] = useState<string>(filterOptions.all.value);\n  const [searchString, setSearchString] = useState<string>('');\n  const [isDataVizOpen, setIsDataVizOpen] = useState<boolean>(false);\n\n  const toggleAddModal = (isOpen: boolean) => {\n    isOpen = typeof isOpen !== 'boolean' ? !isMemoryModalOpen : isOpen;\n    setIsMemoryModalOpen(isOpen);\n  };\n\n  const toggleDataViz = () => {\n    setIsDataVizOpen(isDataVizOpen => !isDataVizOpen);\n  }\n\n  return (\n    <MemoriesContext.Provider\n      value={{ memories: memories, dispatch: dispatch }}\n    >\n      <StyledApp>\n        <MemoryModal\n          toggleAddModal={toggleAddModal}\n          isOpen={isMemoryModalOpen}\n        />\n\n        <Header\n          sortMemories={setSortBy}\n          filterMemories={setFilterBy}\n          toggleAddModal={toggleAddModal}\n          toggleDataViz={toggleDataViz}\n          searchString={searchString}\n          setSearch={setSearchString}\n          count={memories.length}\n        />\n\n        <VisualizationContainer \n          memories={memories}\n          isOpen={isDataVizOpen}\n          setIsOpen={setIsDataVizOpen}\n        />\n\n        <Body\n          memories={memories}\n          sortBy={sortBy}\n          filterBy={filterBy}\n          searchString={searchString}\n        />\n      </StyledApp>\n    </MemoriesContext.Provider>\n  );\n};\n\nconst StyledApp = styled.div`\n  height: 100%;\n  width: 100%;\n  position: relative;\n  overflow-x: hidden;\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}